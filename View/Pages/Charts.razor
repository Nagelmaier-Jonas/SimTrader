@page "/TestingArea"
@using Domain.LogicHandlers
@using Model.ApiData

<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => ChangeTheme()">Change Theme</MudButton>

<DemoContainer>
    <ApexChart TItem="Stock" Options="@_options" @ref="chart">

        <ApexCandleSeries TItem="Stock"
                          Items="stocks"
                          Name="Apex Stock Price"
                          XValue="@(e => e.date.ToString("yyyy MMMM dd"))"
                          Open="@(e => (decimal) e.open)"
                          High="@(e => (decimal) e.high)"
                          Low="@(e => (decimal) e.low)"
                          Close="@(e => (decimal) e.close)"
                          OrderByDescending="e => e.X"/>
    </ApexChart>
</DemoContainer>

<MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
    <MudButton Variant="Variant.Filled" OnClick="@(() => TestApiStock("aapl"))">Latest Stock</MudButton>
    <MudButton Variant="Variant.Filled" OnClick="@(() => @TestApiStockMeta("aapl"))">Stock Meta</MudButton>
    <MudButton Variant="Variant.Filled" OnClick="@(() => @TestApiSearch("apple"))">Search Result</MudButton>
    <MudButton Variant="Variant.Filled" OnClick="@(() => @TestApiStockHistory("aapl", DateTime.Now.AddDays(-7), DateTime.Now))">Stock History</MudButton>
</MudButtonGroup>

@code {

    private ApexChart<Stock> chart;
    private ApexChartOptions<Stock> _options;

    protected override void OnInitialized(){
        _options = new ApexChartOptions<Stock>{
            Chart = new Chart(){
                Height = 500
            },
            Theme = new Theme{
                Mode = Mode.Light,
                Palette = PaletteType.Palette1
            }
        };
    }

    private void ChangeTheme(){
        _options.Theme.Mode = _options.Theme.Mode == Mode.Light ? Mode.Dark : Mode.Light;
        UpdateChart();
    }

    private async Task UpdateChart(){
        await chart.RenderAsync();
    }

    public string LatestStock { get; set; }
    public string StockMeta { get; set; }
    public List<string> StockHistory { get; set; }

    private List<Stock> stocks { get; set; } = new(){
        new Stock{date = DateTime.Now, open = 10, high = 20, low = 5, close = 15}
    };

    private async Task AppendData(){
        var max = stocks.Max(e => e.date);
        var rnd = new Random();

        var newData = new List<Stock>(){
            new Stock(){date = stocks.Last().date.AddDays(1), open = rnd.Next(1, 100), high = rnd.Next(1, 100), low = rnd.Next(1, 100), close = rnd.Next(1, 100)}
        };

        stocks.AddRange(newData);
        await chart.AppendDataAsync(newData);
    }

    private void TestApiStock(string symbol){
        Stock stock = TiingoAPI.GetInstance().GetLatestStockData(symbol);
        if (stock != null){
            Console.WriteLine(stock.ToString());
        }
    }

    private void TestApiStockMeta(string symbol){
        StockMeta meta = TiingoAPI.GetInstance().GetMetaStockData(symbol);
        if (meta != null){
            Console.WriteLine(meta.ToString());
        }
    }

    private void TestApiSearch(string symbol){
        SearchResult searchResult = TiingoAPI.GetInstance().SearchStock(symbol);
        if (searchResult != null){
            foreach (var company in searchResult.Companies){
                Console.WriteLine(company.ToString());
            }
        }
    }

    private void TestApiStockHistory(string symbol, DateTime startDate, DateTime endDate){
        StockHistory history = TiingoAPI.GetInstance().GetStockHistoryData(symbol, startDate, endDate);
        if (history != null){
            foreach (var stock in history.Stocks){
                Console.WriteLine(stock.ToString());
            }
        }
    }

}